// This is a very simple program designed to allow metadata tagging to a given mint,
// with an update authority that can change that metadata going forward.
// Read more: https://github.com/metaplex-foundation/metaplex/tree/master/rust/token-metadata/program
// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package token_metadata

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey = ag_solanago.MustPublicKeyFromBase58("metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s")

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "TokenMetadata"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

const (
	Instruction_CreateMetadataAccount uint8 = iota

	Instruction_UpdateMetadataAccount

	Instruction_DeprecatedCreateMasterEdition

	Instruction_DeprecatedMintNewEditionFromMasterEditionViaPrintingToken

	Instruction_UpdatePrimarySaleHappenedViaToken

	Instruction_DeprecatedSetReservationList

	Instruction_DeprecatedCreateReservationList

	Instruction_SignMetadata

	Instruction_DeprecatedMintPrintingTokensViaToken

	Instruction_DeprecatedMintPrintingTokens

	Instruction_CreateMasterEdition

	Instruction_MintNewEditionFromMasterEditionViaToken

	Instruction_ConvertMasterEditionV1ToV2

	Instruction_MintNewEditionFromMasterEditionViaVaultProxy

	Instruction_PuffMetadata

	Instruction_UpdateMetadataAccountV2

	Instruction_CreateMetadataAccountV2

	Instruction_CreateMasterEditionV3

	Instruction_VerifyCollection

	Instruction_Utilize

	Instruction_ApproveUseAuthority

	Instruction_RevokeUseAuthority

	Instruction_UnverifyCollection

	Instruction_ApproveCollectionAuthority

	Instruction_RevokeCollectionAuthority

	Instruction_SetAndVerifyCollection

	Instruction_FreezeDelegatedAccount

	Instruction_ThawDelegatedAccount

	Instruction_RemoveCreatorVerification

	Instruction_BurnNft

	Instruction_VerifySizedCollectionItem

	Instruction_UnverifySizedCollectionItem

	Instruction_SetAndVerifySizedCollectionItem

	Instruction_CreateMetadataAccountV3

	Instruction_SetCollectionSize

	Instruction_SetTokenStandard

	Instruction_BubblegumSetCollectionSize

	Instruction_BurnEditionNft

	Instruction_CreateEscrowAccount

	Instruction_CloseEscrowAccount

	Instruction_TransferOutOfEscrow

	Instruction_Burn

	Instruction_Create

	Instruction_Mint

	Instruction_Delegate

	Instruction_Revoke

	Instruction_Lock

	Instruction_Unlock

	Instruction_Migrate

	Instruction_Transfer

	Instruction_Update

	Instruction_Use

	Instruction_Verify

	Instruction_Unverify

	Instruction_Collect

	Instruction_Print
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id uint8) string {
	switch id {
	case Instruction_CreateMetadataAccount:
		return "CreateMetadataAccount"
	case Instruction_UpdateMetadataAccount:
		return "UpdateMetadataAccount"
	case Instruction_DeprecatedCreateMasterEdition:
		return "DeprecatedCreateMasterEdition"
	case Instruction_DeprecatedMintNewEditionFromMasterEditionViaPrintingToken:
		return "DeprecatedMintNewEditionFromMasterEditionViaPrintingToken"
	case Instruction_UpdatePrimarySaleHappenedViaToken:
		return "UpdatePrimarySaleHappenedViaToken"
	case Instruction_DeprecatedSetReservationList:
		return "DeprecatedSetReservationList"
	case Instruction_DeprecatedCreateReservationList:
		return "DeprecatedCreateReservationList"
	case Instruction_SignMetadata:
		return "SignMetadata"
	case Instruction_DeprecatedMintPrintingTokensViaToken:
		return "DeprecatedMintPrintingTokensViaToken"
	case Instruction_DeprecatedMintPrintingTokens:
		return "DeprecatedMintPrintingTokens"
	case Instruction_CreateMasterEdition:
		return "CreateMasterEdition"
	case Instruction_MintNewEditionFromMasterEditionViaToken:
		return "MintNewEditionFromMasterEditionViaToken"
	case Instruction_ConvertMasterEditionV1ToV2:
		return "ConvertMasterEditionV1ToV2"
	case Instruction_MintNewEditionFromMasterEditionViaVaultProxy:
		return "MintNewEditionFromMasterEditionViaVaultProxy"
	case Instruction_PuffMetadata:
		return "PuffMetadata"
	case Instruction_UpdateMetadataAccountV2:
		return "UpdateMetadataAccountV2"
	case Instruction_CreateMetadataAccountV2:
		return "CreateMetadataAccountV2"
	case Instruction_CreateMasterEditionV3:
		return "CreateMasterEditionV3"
	case Instruction_VerifyCollection:
		return "VerifyCollection"
	case Instruction_Utilize:
		return "Utilize"
	case Instruction_ApproveUseAuthority:
		return "ApproveUseAuthority"
	case Instruction_RevokeUseAuthority:
		return "RevokeUseAuthority"
	case Instruction_UnverifyCollection:
		return "UnverifyCollection"
	case Instruction_ApproveCollectionAuthority:
		return "ApproveCollectionAuthority"
	case Instruction_RevokeCollectionAuthority:
		return "RevokeCollectionAuthority"
	case Instruction_SetAndVerifyCollection:
		return "SetAndVerifyCollection"
	case Instruction_FreezeDelegatedAccount:
		return "FreezeDelegatedAccount"
	case Instruction_ThawDelegatedAccount:
		return "ThawDelegatedAccount"
	case Instruction_RemoveCreatorVerification:
		return "RemoveCreatorVerification"
	case Instruction_BurnNft:
		return "BurnNft"
	case Instruction_VerifySizedCollectionItem:
		return "VerifySizedCollectionItem"
	case Instruction_UnverifySizedCollectionItem:
		return "UnverifySizedCollectionItem"
	case Instruction_SetAndVerifySizedCollectionItem:
		return "SetAndVerifySizedCollectionItem"
	case Instruction_CreateMetadataAccountV3:
		return "CreateMetadataAccountV3"
	case Instruction_SetCollectionSize:
		return "SetCollectionSize"
	case Instruction_SetTokenStandard:
		return "SetTokenStandard"
	case Instruction_BubblegumSetCollectionSize:
		return "BubblegumSetCollectionSize"
	case Instruction_BurnEditionNft:
		return "BurnEditionNft"
	case Instruction_CreateEscrowAccount:
		return "CreateEscrowAccount"
	case Instruction_CloseEscrowAccount:
		return "CloseEscrowAccount"
	case Instruction_TransferOutOfEscrow:
		return "TransferOutOfEscrow"
	case Instruction_Burn:
		return "Burn"
	case Instruction_Create:
		return "Create"
	case Instruction_Mint:
		return "Mint"
	case Instruction_Delegate:
		return "Delegate"
	case Instruction_Revoke:
		return "Revoke"
	case Instruction_Lock:
		return "Lock"
	case Instruction_Unlock:
		return "Unlock"
	case Instruction_Migrate:
		return "Migrate"
	case Instruction_Transfer:
		return "Transfer"
	case Instruction_Update:
		return "Update"
	case Instruction_Use:
		return "Use"
	case Instruction_Verify:
		return "Verify"
	case Instruction_Unverify:
		return "Unverify"
	case Instruction_Collect:
		return "Collect"
	case Instruction_Print:
		return "Print"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.Uint8TypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"CreateMetadataAccount", (*CreateMetadataAccount)(nil),
		},
		{
			"UpdateMetadataAccount", (*UpdateMetadataAccount)(nil),
		},
		{
			"DeprecatedCreateMasterEdition", (*DeprecatedCreateMasterEdition)(nil),
		},
		{
			"DeprecatedMintNewEditionFromMasterEditionViaPrintingToken", (*DeprecatedMintNewEditionFromMasterEditionViaPrintingToken)(nil),
		},
		{
			"UpdatePrimarySaleHappenedViaToken", (*UpdatePrimarySaleHappenedViaToken)(nil),
		},
		{
			"DeprecatedSetReservationList", (*DeprecatedSetReservationList)(nil),
		},
		{
			"DeprecatedCreateReservationList", (*DeprecatedCreateReservationList)(nil),
		},
		{
			"SignMetadata", (*SignMetadata)(nil),
		},
		{
			"DeprecatedMintPrintingTokensViaToken", (*DeprecatedMintPrintingTokensViaToken)(nil),
		},
		{
			"DeprecatedMintPrintingTokens", (*DeprecatedMintPrintingTokens)(nil),
		},
		{
			"CreateMasterEdition", (*CreateMasterEdition)(nil),
		},
		{
			"MintNewEditionFromMasterEditionViaToken", (*MintNewEditionFromMasterEditionViaToken)(nil),
		},
		{
			"ConvertMasterEditionV1ToV2", (*ConvertMasterEditionV1ToV2)(nil),
		},
		{
			"MintNewEditionFromMasterEditionViaVaultProxy", (*MintNewEditionFromMasterEditionViaVaultProxy)(nil),
		},
		{
			"PuffMetadata", (*PuffMetadata)(nil),
		},
		{
			"UpdateMetadataAccountV2", (*UpdateMetadataAccountV2)(nil),
		},
		{
			"CreateMetadataAccountV2", (*CreateMetadataAccountV2)(nil),
		},
		{
			"CreateMasterEditionV3", (*CreateMasterEditionV3)(nil),
		},
		{
			"VerifyCollection", (*VerifyCollection)(nil),
		},
		{
			"Utilize", (*Utilize)(nil),
		},
		{
			"ApproveUseAuthority", (*ApproveUseAuthority)(nil),
		},
		{
			"RevokeUseAuthority", (*RevokeUseAuthority)(nil),
		},
		{
			"UnverifyCollection", (*UnverifyCollection)(nil),
		},
		{
			"ApproveCollectionAuthority", (*ApproveCollectionAuthority)(nil),
		},
		{
			"RevokeCollectionAuthority", (*RevokeCollectionAuthority)(nil),
		},
		{
			"SetAndVerifyCollection", (*SetAndVerifyCollection)(nil),
		},
		{
			"FreezeDelegatedAccount", (*FreezeDelegatedAccount)(nil),
		},
		{
			"ThawDelegatedAccount", (*ThawDelegatedAccount)(nil),
		},
		{
			"RemoveCreatorVerification", (*RemoveCreatorVerification)(nil),
		},
		{
			"BurnNft", (*BurnNft)(nil),
		},
		{
			"VerifySizedCollectionItem", (*VerifySizedCollectionItem)(nil),
		},
		{
			"UnverifySizedCollectionItem", (*UnverifySizedCollectionItem)(nil),
		},
		{
			"SetAndVerifySizedCollectionItem", (*SetAndVerifySizedCollectionItem)(nil),
		},
		{
			"CreateMetadataAccountV3", (*CreateMetadataAccountV3)(nil),
		},
		{
			"SetCollectionSize", (*SetCollectionSize)(nil),
		},
		{
			"SetTokenStandard", (*SetTokenStandard)(nil),
		},
		{
			"BubblegumSetCollectionSize", (*BubblegumSetCollectionSize)(nil),
		},
		{
			"BurnEditionNft", (*BurnEditionNft)(nil),
		},
		{
			"CreateEscrowAccount", (*CreateEscrowAccount)(nil),
		},
		{
			"CloseEscrowAccount", (*CloseEscrowAccount)(nil),
		},
		{
			"TransferOutOfEscrow", (*TransferOutOfEscrow)(nil),
		},
		{
			"Burn", (*Burn)(nil),
		},
		{
			"Create", (*Create)(nil),
		},
		{
			"Mint", (*Mint)(nil),
		},
		{
			"Delegate", (*Delegate)(nil),
		},
		{
			"Revoke", (*Revoke)(nil),
		},
		{
			"Lock", (*Lock)(nil),
		},
		{
			"Unlock", (*Unlock)(nil),
		},
		{
			"Migrate", (*Migrate)(nil),
		},
		{
			"Transfer", (*Transfer)(nil),
		},
		{
			"Update", (*Update)(nil),
		},
		{
			"Use", (*Use)(nil),
		},
		{
			"Verify", (*Verify)(nil),
		},
		{
			"Unverify", (*Unverify)(nil),
		},
		{
			"Collect", (*Collect)(nil),
		},
		{
			"Print", (*Print)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteUint8(inst.TypeID.Uint8())
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
